timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
)
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
?leaflet
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",popup = radius,
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow") %>% addPopups(power_geos, content,
options = popupOptions(closeButton = FALSE)
)
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow") %>% addPopups(power_geo, content,
options = popupOptions(closeButton = FALSE)
)
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow") %>% addPopups(StatesDaily$Long,StatesDaily$Long, content,
options = popupOptions(closeButton = FALSE)
)
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
popupContent: +data.properties.radius
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow") %>% addPopups(StatesDaily$Long,StatesDaily$Long, content,
options = popupOptions(closeButton = FALSE)
)
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
popupContent: +data.properties.radius
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
popupContent: +data.properties.radius,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
click: +data.properties.radius,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
var mypopup = L.popup().setContent(radius);
var mymarker = L.circleMarker(latlng, geojsonMarkerOptions);
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
)
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
geoJsonLayer.on('featureparse', function(e){
//Now you can bind popups to features in the layer, and you have access to
//attributes on the GeoJSON object through e.properties:
e.layer.bindPopup('Hello! ' + e.properties.someProperty);
});
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
geoJsonLayer.on('featureparse', function(e){
//Now you can bind popups to features in the layer, and you have access to
//attributes on the GeoJSON object through e.properties:
e.layer.bindPopup('Hello! ' + e.properties.someProperty);
});
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
geoJsonLayer.on('featureparse', function(e){
//Now you can bind popups to features in the layer, and you have access to
//attributes on the GeoJSON object through e.properties:
e.layer.bindPopup('Hello! ' + e.properties.someProperty);
});
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
icon: L.divIcon({
className: 'circle',
iconSize: [5, 5]
}),
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
leaflet(States_Daily_Geo) %>%
addTiles() %>%
setView(78.435977, 23.204480, zoom = 5) %>%
addTimeline(width = "96%",
timelineOpts = timelineOptions(
styleOptions = NULL, # make sure default style does not override
pointToLayer = htmlwidgets::JS(
"
function(data, latlng) {
return L.circleMarker(
latlng,
{
radius: +data.properties.radius,
color: data.properties.color,
fillColor: data.properties.color,
fillOpacity: 1
}
);
}
function (feature, latlng) {
var popup = L.popup().setContent(radius);
var marker = L.circleMarker(latlng, geojsonMarkerOptions);
marker.bindPopup(popup);
return marker;
}
"
)
)
) %>%  addPolygons(data=states, weight = 2, fillColor = "yellow")
# we can add data in addTimeline
leaflet() %>%
addTiles() %>%
setView(44.0665,23.74667,2) %>%
addTimeline(data = power_geo)
library(leaflet)
library(leaftime)
library(htmltools)
#Build data.frame with 10 obs + 3 cols
power <- data.frame(
"Latitude" = c(
33.515556, 38.060556, 47.903056, 49.71, 49.041667, 31.934167,
54.140586, 54.140586, 48.494444, 48.494444
),
"Longitude" = c(
129.837222, -77.789444, 7.563056, 8.415278, 9.175, -82.343889,
13.664422, 13.664422, 17.681944, 17.681944
),
"start" = seq.Date(as.Date("2015-01-01"), by = "day", length.out = 10),
"end" = seq.Date(as.Date("2015-01-01"), by = "day", length.out = 10) + 1
)
# use geojsonio to convert our data.frame
#  to GeoJSON which timeline expects
power_geo <- geojsonio::geojson_json(power,lat="Latitude",lon="Longitude")
# we can add data in addTimeline
leaflet() %>%
addTiles() %>%
setView(44.0665,23.74667,2) %>%
addTimeline(data = power_geo)
# we can add data in addTimeline
leaflet() %>%
addTiles() %>%
setView(44.0665,23.74667,2) %>%
addTimeline(data = power_geo)
